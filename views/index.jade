doctype html
html(lang="en")
    head
        title= "Shithead"
        meta(charset="UTF-8")
        link(rel="stylesheet", href="/css/style.css", type="text/css")
    body
        div(id="wrapper")
            div(id="game")
            div(id="playerData")
                div(id="input-nickname")
                    form
                        p choose a nickname:
                        input(id="name")
                        button(type="submit") Join
                div(id="lobby")
                    p(id="pc") Player count: #[span= playerCount]

                    ul(id="playersList")
                        each player in players
                            li= player._nickname
                                if player._ready
                                  | (ready)
                    button(id="ready-btn") Ready
                    button(id="unready-btn") Not Ready

                div(id="kicked")
                    p You have been kicked from the game for being inactive, refresh your browser.
                div(id="stopped")
                    p

        script(src="/js/phaser.min.js")
        script(src="http://code.jquery.com/jquery-1.11.1.js")
        script(src="/socket.io/socket.io.js")
        script(src="/js/cardTranslator.js")
        script(src="/js/rules.js")
        script(src="/js/game.js")
        script.
            var socket = io();

                function init(){
                    $('#ready-btn').hide();
                    $('#unready-btn').hide();
                }

            function updatePlayerList(players){

                // Empty list
                $('#playersList').html('');

                for( var i = 0; i< players.length; i++){

                    var readyText = "";
                    //console.log(players[i]._ready);
                    if( players[i]._ready == true){
                        readyText = " (ready)";
                    }

                    $('#playersList').append(
                            $('<li>', {
                                text: players[i]._nickname + readyText
                            })
                    );
                }
            }


            function updatePlayerCount(count){
                $('#pc').find('span').text(count);
            }

            function updateGUI(data){
                updatePlayerCount(data.playerCount);
                updatePlayerList(data.players);
            }
            socket.on('chooseNickname', function(){
                // Show UI
                $('#playerData').show();
                $('#input-nickname').show();
               // var name = prompt("What is your name? ");
               // socket.emit('register', name);

               //return joined();
            });

            function joined(){
                $('#ready-btn').show();
                $('#input-nickname').hide();
                $('#lobby').show();
            }

            function ready(){
                $('#ready-btn').hide();
                $('#unready-btn').show();
            }

            function notReady(){
                $('#ready-btn').show();
                $('#unready-btn').hide();
            }

            function showGameEnd(playerList){
                var el = $('#stopped').html('');
                el.append('<h2>Game ended</h2>');
                el.append('<ol></ol>');

                var list = el.find('ol');

                for( var i = 0; i < playerList.length; i++){
                    list.append('<li>'+playerList[i]._nickname + '</li>');
                }


            }

            socket.on('newPlayer', function(data){
                updateGUI(data);
            });

            socket.on('playerLeft', function(data){
                updateGUI(data);
            });
            socket.on('playerReady', function(data){
                updateGUI(data);
            });

            socket.on('playerUnReady', function(data){
                updateGUI(data);
            });

            socket.on('lateJoin', function(){
                alert('The game already started, you can no longer join.')
            });

            socket.on('startGame', function(){
                lobbyState.startGame();
                console.log("SOCKET: START GAME");
                $('#playerData').hide();
            });

            socket.on('giveHand', function(data){
                console.log("SOCKET: GIVE HAND");
                playState.dealCards(data);
                socket.emit('gotHand');
            });

            socket.on('giveTurn', function(){
                console.log("it's your turn");
                playState.yourTurn();
            });

            socket.on('newTurn', function(player){
                console.log("I'ts "+player._nickname+"'s turn");
                playState.newTurn(player);
            });

            socket.on('kicked', function(){
                $('#playerData').show();
                $('#lobby').hide();
                $('#kicked').show();
            });

            socket.on('falseMove', function(){
                // Todo: reset move

            });

            socket.on('placed', function(card){
                // Render card for othersc
                console.log(card);
                playState.serverPlace(card);
            });

            socket.on('stopped', function(data){
                $('#playerData').show();
                $('#lobby').hide();
                $('#stopped').show();
                var el = $('#stopped').find('p');

                if( data.reason == 1){
                    el.text("The game has ended because there aren't enough players.");
                }
                else if( data.reason == 2){
                    showGameEnd(data.playerList);
                }
            });

            socket.on('takenCards', function(cards){
                playState.takenCards(cards);
            });

            socket.on('reshuffle', function(lastCard){
                playState.reshuffle(lastCard);
            });

            socket.on('noCardsLeft', function(){
                console.log('no cards left');
                // Remove deck
                playState.removeDeck();
            });

            socket.on('debt', function(){
                playState.hasDebt();
            });

            socket.on('paidDebt', function(cards){
                playState.paidDebt(cards);
            });

            $(function(){

                init();

                $(document).on('click', '#ready-btn', function(){
                    socket.emit('ready');
                    return ready();
                });

                $(document).on('click', '#unready-btn', function(){
                    socket.emit('unready');
                    return notReady();
                });

                $(document).on('submit', '#input-nickname form', function(e){
                    e.preventDefault();
                    var name = $('#name').val();

                    if( name.length < 1 ){
                        return false;
                    }
                    socket.emit('register', name);
                    return joined();
                });
            });


